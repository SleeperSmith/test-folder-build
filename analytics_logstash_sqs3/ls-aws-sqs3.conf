input {
	s3 {
		queue_name => "{{sqs-name}}"
		region => "{{aws-region}}"
		temporary_directory => "/home/local/temp"
	}
}

filter {
	fingerprint {
		key => "3fj8q9h4j8qu9frh9w8aejf98w34fhq79hnaqf"
		method => "SHA1"
		target => "event_unique_id"
	}

	if [s3_bucket] == "{{raw-log-bucket}}" {
		if [s3_key] =~ "^AWSLogs\/.*\/elasticloadbalancing\/" {
			grok {
				match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:loadbalancer} %{IP:client_ip}:%{NUMBER:client_port:int} %{IP:backend_ip}:%{NUMBER:backend_port:int} %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} %{NUMBER:elb_status_code:int} %{NUMBER:backend_status_code:int} %{NUMBER:received_bytes:int} %{NUMBER:sent_bytes:int} %{QS:request}" ]
				remove_field => "message"
				add_field => ["index_name", "elb"]
			}
			grok {
				match => ["request", "%{WORD:verb} %{NOTSPACE:protocol}://%{NOTSPACE:host}:%{NUMBER:host_port}%{NOTSPACE:url_path} HTTP/%{NUMBER:httpversion}"]
			}
			date {
				match => [ "timestamp", "ISO8601" ]
				remove_field => "timestamp"
			}
		}
	}

	if [s3_bucket] == "{{s3-access-log-bucket}}" {
		grok {
			match => ["message", "%{S3_ACCESS_LOG}"]
			remove_field => "message"
			add_field => ["index_name", "s3-access"]
		}
		date {
			match => ["timestamp", "d/MMM/YYYY:HH:mm:ss Z"]
			remove_field => "timestamp"
		}
	}
        if [s3_bucket] == "{{cf-access-log-bucket}}" {
		if ( ("#Version: 1.0" in [message]) or ("#Fields: date" in [message])) {
			drop {}
		}

		grok {
			match => { "message" => "%{DATE_EU:date}\t%{TIME:time}\t%{WORD:x_edge_location}\t(?:%{NUMBER:sc_bytes}|-)\t%{IPORHOST:c_ip}\t%{WORD:cs_method}\t%{HOSTNAME:cs_host}\t%{NOTSPACE:cs_uri}\t%{NUMBER:sc_status}\t%{GREEDYDATA:referrer}\t%{GREEDYDATA:User_Agent}\t%{GREEDYDATA:cs_uri_stem}\t%{GREEDYDATA:cookies}\t%{WORD:x_edge_result_type}\t%{NOTSPACE:x_edge_request_id}\t%{HOSTNAME:x_host_header}\t%{URIPROTO:cs_protocol}\t%{INT:cs_bytes}\t%{GREEDYDATA:time_taken}\t%{GREEDYDATA:x_forwarded_for}\t%{GREEDYDATA:ssl_protocol}\t%{GREEDYDATA:ssl_cipher}\t%{GREEDYDATA:x_edge_response_result_type}" }
		}
		mutate {
			add_field => [ "received_at", "%{@timestamp}" ]
			add_field => [ "listener_timestamp", "%{date} %{time}" ]
			add_field => [ "index_name", "cf-access" ]
			remove_field => [ "message" ]
			remove_field => [ "cloudfront_fields" ]
		}
		date {
			match => [ "listener_timestamp", "yy-MM-dd HH:mm:ss" ]
		}
		if [cs_uri_stem] {
			mutate {
				rename => { "cs_uri_stem" => "cs_uri_stem[request]" }
			}
			urldecode {
				field => "cs_uri_stem[request]"
			}
			kv {
				source => "cs_uri_stem[request]"
				field_split => "?&"
				target => "cs_uri_stem"
			}

			mutate {
				remove_field => [ "cs_uri_stem" ]
			}
		}
	}
	
	mutate {
		remove_field => "s3_key"
		remove_field => "s3_bucket"
	}
}

output {
	if [index_name] and [event_unique_id] {
		elasticsearch {
			hosts => ["{{es-host}}"]
			index => "logstash-%{[index_name]}-%{+YYYY.MM.dd}"
			document_id => '%{[event_unique_id]}'
		}
	}
}
