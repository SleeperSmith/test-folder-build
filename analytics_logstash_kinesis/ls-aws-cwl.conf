input {
	kinesis {
		kinesis_stream_name => "{{stream-name}}"
		application_name => "{{checkpoint-ddb}}"
		region => "{{aws-region}}"
		codec => json {}
	}
}

filter {
	if [logGroup] == "" {
		drop {}
	}
	if [logEvents] {
		split {
			field => "logEvents"
			add_tag => "split"
		}
	}
	if ("split" not in [tags]) {
		mutate {
			rename => { "[logEvents][0]" => "[logEvents]" }
		}
	}
	mutate {
		rename => { "[logEvents][id]" => "[event_unique_id]" }
	}

	if [logGroup] == "{{vpc-log-group}}" {
		mutate {
			remove_field => "[logEvents][message]"
		}
		date {
			match => [ "[logEvents][timestamp]", "UNIX_MS" ]
			remove_field => ["[logEvents][timestamp]"]
		}
		date {
			match => [ "[logEvents][extractedFields][start]", "UNIX" ]
			remove_field => ["[logEvents][extractedFields][start]"]
			target => "start_ts"
		}
		date {
			match => [ "[logEvents][extractedFields][end]", "UNIX" ]
			remove_field => ["[logEvents][extractedFields][end]"]
			target => "end_ts"
		}
		mutate {
			convert => { "[logEvents][extractedFields][bytes]" => "integer" }
			convert => { "[logEvents][extractedFields][packets]" => "integer" }
		}
		if [logEvents][extractedFields][srcaddr] =~ "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$" {
			geoip {
				source => "[logEvents][extractedFields][srcaddr]"
			}
		}
	}
	if [logGroup] == "{{ct-log-group}}" {
		json {
			source => "[logEvents][message]"
			remove_field => "[logEvents][message]"
		}
		date {
			match => ["eventTime", "ISO8601"]
		}
		mutate {
			rename => ["eventID", "event_unique_id"]
		}
		if [sourceIPAddress] =~ "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$" {
			geoip { source => "sourceIPAddress" }
		}
	}
	if [logGroup] == "{{docker-log-group}}" {
		grok {
			match => { "logStream" => ["%{GREEDYDATA:log_format}_%{GREEDYDATA:application}_%{GREEDYDATA:instance_id}", "%{GREEDYDATA:application}_%{GREEDYDATA:instance_id}", "%{GREEDYDATA:instance_id}"] }
		}
		if [log_format] == "json" {
			json {
				source => "[logEvents][message]"
				remove_field => "[logEvents][message]"
			}
		}
	}
	if [logGroup] == "{{syslog-log-group}}" or
	   [logGroup] == "{{authlog-log-group}}" {
		grok {
			match => { "[logEvents][message]" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
			add_field => [ "received_at", "%{@timestamp}" ]
			add_field => [ "received_from", "%{host}" ]
			remove_field => "[logEvents][message]"
		}
		syslog_pri { }
		date {
			match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
		}
	}
	
	mutate {
		# because index name cannot be upper case
		lowercase => ["logGroup"]
	}
}

output {
	elasticsearch {
		hosts => ["{{es-host}}"]
		index => "logstash-%{[logGroup]}-%{+YYYY.MM.dd}"
		document_id => '%{[event_unique_id]}'
	}
}
